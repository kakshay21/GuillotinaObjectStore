// This file is generated by rust-protobuf 2.10.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `guillotina.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_10_2;

#[derive(PartialEq,Clone,Default)]
pub struct StartTransactionRequest {
    // message fields
    pub write: bool,
    pub user: ::std::string::String,
    pub path: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StartTransactionRequest {
    fn default() -> &'a StartTransactionRequest {
        <StartTransactionRequest as ::protobuf::Message>::default_instance()
    }
}

impl StartTransactionRequest {
    pub fn new() -> StartTransactionRequest {
        ::std::default::Default::default()
    }

    // bool write = 1;


    pub fn get_write(&self) -> bool {
        self.write
    }
    pub fn clear_write(&mut self) {
        self.write = false;
    }

    // Param is passed by value, moved
    pub fn set_write(&mut self, v: bool) {
        self.write = v;
    }

    // string user = 2;


    pub fn get_user(&self) -> &str {
        &self.user
    }
    pub fn clear_user(&mut self) {
        self.user.clear();
    }

    // Param is passed by value, moved
    pub fn set_user(&mut self, v: ::std::string::String) {
        self.user = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_user(&mut self) -> &mut ::std::string::String {
        &mut self.user
    }

    // Take field
    pub fn take_user(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.user, ::std::string::String::new())
    }

    // string path = 4;


    pub fn get_path(&self) -> &str {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }
}

impl ::protobuf::Message for StartTransactionRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.write = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.user)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.write != false {
            my_size += 2;
        }
        if !self.user.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.user);
        }
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.path);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.write != false {
            os.write_bool(1, self.write)?;
        }
        if !self.user.is_empty() {
            os.write_string(2, &self.user)?;
        }
        if !self.path.is_empty() {
            os.write_string(4, &self.path)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StartTransactionRequest {
        StartTransactionRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "write",
                    |m: &StartTransactionRequest| { &m.write },
                    |m: &mut StartTransactionRequest| { &mut m.write },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "user",
                    |m: &StartTransactionRequest| { &m.user },
                    |m: &mut StartTransactionRequest| { &mut m.user },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "path",
                    |m: &StartTransactionRequest| { &m.path },
                    |m: &mut StartTransactionRequest| { &mut m.path },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<StartTransactionRequest>(
                    "StartTransactionRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StartTransactionRequest {
        static mut instance: ::protobuf::lazy::Lazy<StartTransactionRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StartTransactionRequest,
        };
        unsafe {
            instance.get(StartTransactionRequest::new)
        }
    }
}

impl ::protobuf::Clear for StartTransactionRequest {
    fn clear(&mut self) {
        self.write = false;
        self.user.clear();
        self.path.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StartTransactionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StartTransactionRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TxnId {
    // message fields
    pub tid: u64,
    pub part: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TxnId {
    fn default() -> &'a TxnId {
        <TxnId as ::protobuf::Message>::default_instance()
    }
}

impl TxnId {
    pub fn new() -> TxnId {
        ::std::default::Default::default()
    }

    // uint64 tid = 1;


    pub fn get_tid(&self) -> u64 {
        self.tid
    }
    pub fn clear_tid(&mut self) {
        self.tid = 0;
    }

    // Param is passed by value, moved
    pub fn set_tid(&mut self, v: u64) {
        self.tid = v;
    }

    // uint32 part = 2;


    pub fn get_part(&self) -> u32 {
        self.part
    }
    pub fn clear_part(&mut self) {
        self.part = 0;
    }

    // Param is passed by value, moved
    pub fn set_part(&mut self, v: u32) {
        self.part = v;
    }
}

impl ::protobuf::Message for TxnId {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.tid = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.part = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.tid != 0 {
            my_size += ::protobuf::rt::value_size(1, self.tid, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.part != 0 {
            my_size += ::protobuf::rt::value_size(2, self.part, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.tid != 0 {
            os.write_uint64(1, self.tid)?;
        }
        if self.part != 0 {
            os.write_uint32(2, self.part)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TxnId {
        TxnId::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "tid",
                    |m: &TxnId| { &m.tid },
                    |m: &mut TxnId| { &mut m.tid },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "part",
                    |m: &TxnId| { &m.part },
                    |m: &mut TxnId| { &mut m.part },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TxnId>(
                    "TxnId",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TxnId {
        static mut instance: ::protobuf::lazy::Lazy<TxnId> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TxnId,
        };
        unsafe {
            instance.get(TxnId::new)
        }
    }
}

impl ::protobuf::Clear for TxnId {
    fn clear(&mut self) {
        self.tid = 0;
        self.part = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TxnId {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TxnId {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10guillotina.proto\x12\x03gos\"W\n\x17StartTransactionRequest\x12\
    \x14\n\x05write\x18\x01\x20\x01(\x08R\x05write\x12\x12\n\x04user\x18\x02\
    \x20\x01(\tR\x04user\x12\x12\n\x04path\x18\x04\x20\x01(\tR\x04path\"-\n\
    \x05TxnId\x12\x10\n\x03tid\x18\x01\x20\x01(\x04R\x03tid\x12\x12\n\x04par\
    t\x18\x02\x20\x01(\rR\x04part2M\n\x0bTransaction\x12>\n\x10StartTransact\
    ion\x12\x1c.gos.StartTransactionRequest\x1a\n.gos.TxnId\"\0J\x8e\x04\n\
    \x06\x12\x04\0\0\x16\x01\n/\n\x01\x0c\x12\x03\0\0\x12\"%\x20import\x20\"\
    google/protobuf/any.proto\";\n\n\x08\n\x01\x02\x12\x03\x03\0\x0c\n\n\n\
    \x02\x06\0\x12\x04\x05\0\t\x01\n\n\n\x03\x06\0\x01\x12\x03\x05\x08\x13\n\
    '\n\x04\x06\0\x02\0\x12\x03\x08\x04D\x1a\x1a\x20Starts\x20a\x20new\x20tr\
    ansaction\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x08\x08\x18\n\x0c\n\x05\
    \x06\0\x02\0\x02\x12\x03\x08\x190\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\
    \x08;@\n\n\n\x02\x04\0\x12\x04\x0c\0\x11\x01\n\n\n\x03\x04\0\x01\x12\x03\
    \x0c\x08\x1f\n\x0b\n\x04\x04\0\x02\0\x12\x03\r\x04\x13\n\x0c\n\x05\x04\0\
    \x02\0\x05\x12\x03\r\x04\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\r\t\x0e\
    \n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\r\x11\x12\n\x0b\n\x04\x04\0\x02\x01\
    \x12\x03\x0e\x04\x14\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x0e\x04\n\n\
    \x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0e\x0b\x0f\n\x0c\n\x05\x04\0\x02\
    \x01\x03\x12\x03\x0e\x12\x13\n(\n\x04\x04\0\x02\x02\x12\x03\x10\x04\x14\
    \x1a\x1brepeated\x20string\x20roles\x20=\x203;\n\n\x0c\n\x05\x04\0\x02\
    \x02\x05\x12\x03\x10\x04\n\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x10\x0b\
    \x0f\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x10\x12\x13\n\n\n\x02\x04\x01\
    \x12\x04\x13\0\x16\x01\n\n\n\x03\x04\x01\x01\x12\x03\x13\x08\r\n\x0b\n\
    \x04\x04\x01\x02\0\x12\x03\x14\x04\x13\n\x0c\n\x05\x04\x01\x02\0\x05\x12\
    \x03\x14\x04\n\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x14\x0b\x0e\n\x0c\n\
    \x05\x04\x01\x02\0\x03\x12\x03\x14\x11\x12\n\x0b\n\x04\x04\x01\x02\x01\
    \x12\x03\x15\x04\x14\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x15\x04\n\n\
    \x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x15\x0b\x0f\n\x0c\n\x05\x04\x01\
    \x02\x01\x03\x12\x03\x15\x12\x13b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
